#From file /qtbase/mkspecs/devices/linux-g++-tizen/qmake.conf
#Tizen spec

#From file /qtbase/mkspecs/devices/common/linux_tizen_device_pre.conf
#tizen common mkspec

#From file /qtbase/mkspecs/devices/common/linux_device_pre.conf
QT_QPA_DEFAULT_PLATFORM = eglfs

MAKEFILE_GENERATOR      = UNIX
CONFIG                 += incremental
QMAKE_INCREMENTAL_STYLE = sublib

#From file /qtbase/mkspecs/common/linux.conf
#
# qmake configuration for common linux
#

QMAKE_PLATFORM         += tizen

QMAKE_CFLAGS_THREAD    += -D_REENTRANT
QMAKE_CXXFLAGS_THREAD  += $$QMAKE_CFLAGS_THREAD

QMAKE_INCDIR            =
QMAKE_LIBDIR            =
QMAKE_INCDIR_X11        =
QMAKE_LIBDIR_X11        =
QMAKE_INCDIR_OPENGL     =
QMAKE_LIBDIR_OPENGL     =
QMAKE_INCDIR_OPENGL_ES1 = $$QMAKE_INCDIR_OPENGL
QMAKE_LIBDIR_OPENGL_ES1 = $$QMAKE_LIBDIR_OPENGL
QMAKE_INCDIR_OPENGL_ES2 = $$QMAKE_INCDIR_OPENGL
QMAKE_LIBDIR_OPENGL_ES2 = $$QMAKE_LIBDIR_OPENGL
QMAKE_INCDIR_EGL        =
QMAKE_LIBDIR_EGL        =
QMAKE_INCDIR_OPENVG     =
QMAKE_LIBDIR_OPENVG     =

QMAKE_LIBS              =
QMAKE_LIBS_DYNLOAD      = -ldl
QMAKE_LIBS_X11          = -lXext -lX11 -lm
QMAKE_LIBS_NIS          = -lnsl
QMAKE_LIBS_EGL          = -lEGL
QMAKE_LIBS_OPENGL       = -lGL
QMAKE_LIBS_OPENGL_ES1   = -lGLESv1_CM
QMAKE_LIBS_OPENGL_ES2   = -lGLESv2
QMAKE_LIBS_OPENVG       = -lOpenVG
QMAKE_LIBS_THREAD       = -lpthread
QMAKE_LIBS_LIBUDEV      = -ludev

QMAKE_CFLAGS_WAYLAND    =
QMAKE_INCDIR_WAYLAND    =
QMAKE_LIBS_WAYLAND_CLIENT = -lwayland-client
QMAKE_LIBS_WAYLAND_SERVER = -lwayland-server
QMAKE_LIBDIR_WAYLAND    =
QMAKE_DEFINES_WAYLAND   =
QMAKE_WAYLAND_SCANNER   = wayland-scanner

QMAKE_CFLAGS_XCB        =
QMAKE_LIBS_XCB          =
QMAKE_DEFINES_XCB       =

QMAKE_OBJCOPY           = objcopy
QMAKE_NM                = nm -P
QMAKE_RANLIB            =

QMAKE_STRIP             = strip
QMAKE_STRIPFLAGS_LIB   += --strip-unneeded
QMAKE_INSTALL_FILE      = install -m 644 -p
QMAKE_INSTALL_PROGRAM   = install -m 755 -p

#From file /qtbase/mkspecs/common/unix.conf
#
# qmake configuration for common unix
#

QMAKE_PLATFORM         += unix posix

QMAKE_LEX               = flex
QMAKE_LEXFLAGS         +=
QMAKE_YACC              = yacc
QMAKE_YACCFLAGS        += -d
QMAKE_YACCFLAGS_MANGLE += -p $base -b $base
QMAKE_YACC_HEADER       = $base.tab.h
QMAKE_YACC_SOURCE       = $base.tab.c
QMAKE_PREFIX_SHLIB      = lib
QMAKE_PREFIX_STATICLIB  = lib
QMAKE_EXTENSION_STATICLIB = a

#From file /qtbase/mkspecs/common/shell-unix.conf
QMAKE_TAR               = tar -cf
QMAKE_GZIP              = gzip -9f

QMAKE_COPY              = cp -f
QMAKE_COPY_FILE         = $$QMAKE_COPY
QMAKE_COPY_DIR          = $$QMAKE_COPY -R
QMAKE_MOVE              = mv -f
QMAKE_DEL_FILE          = rm -f
QMAKE_DEL_DIR           = rmdir
QMAKE_CHK_EXISTS        = test -e %1 ||
QMAKE_CHK_DIR_EXISTS    = test -d    # legacy
QMAKE_MKDIR             = mkdir -p   # legacy
QMAKE_MKDIR_CMD         = test -d %1 || mkdir -p %1
QMAKE_STREAM_EDITOR     = sed
#End of file /qtbase/mkspecs/common/shell-unix.conf
#End of file /qtbase/mkspecs/common/unix.conf
#End of file /qtbase/mkspecs/common/linux.conf
#From file /qtbase/mkspecs/common/gcc-base-unix.conf
#
# Base qmake configuration for GCC on *nix-systems
#
# Before making changes to this file, please read the comment in
# gcc-base.conf, to make sure the change goes in the right place.
#
# To verify that your change has the desired effect on the final configuration
# you can use the manual test in tests/manual/mkspecs.
#

#From file /qtbase/mkspecs/common/gcc-base.conf
#
# This file is used as a basis for the following compilers:
#
# - The GNU C++ compiler (g++)
# - LLVM
# - Clang
#
# Platform-specific options shared by these compilers are put into:
#
# - gcc-base-mac.conf
# - gcc-base-unix.conf
#
# These base files are then combined with configurations for each compiler:
#
# - g++-base.conf
# - g++-macx.conf
# - g++-unix.conf
# - llvm.conf
# - clang.conf
#
# The combination happens in the top level mkspec, by including a platform-
# specific version of the base-file, for example gcc-base-mac.conf, and then
# a (possibly platform-specific) version of the actual compiler configuration,
# for example g++-macx.conf.
#
# If you are making changes to any of these files, please consider the
# possible effect it may have due to these include-rules, and whether it
# might make more sense to share the rule or make it more specific.
#
# To verify that your change has the desired effect on the final configuration
# you can use the manual test in tests/manual/mkspecs.
#

QMAKE_CFLAGS_OPTIMIZE      = -O1
QMAKE_CFLAGS_OPTIMIZE_FULL = -O1

QMAKE_CFLAGS               += -pipe
QMAKE_CFLAGS_DEPS          += -M
QMAKE_CFLAGS_WARN_ON       += -Wall -W
QMAKE_CFLAGS_WARN_OFF      += -w
QMAKE_CFLAGS_RELEASE       += $$QMAKE_CFLAGS_OPTIMIZE
QMAKE_CFLAGS_DEBUG         += -g3
QMAKE_CFLAGS_SHLIB         += -fPIC
QMAKE_CFLAGS_STATIC_LIB    += -fPIC
QMAKE_CFLAGS_APP           += -fPIE
QMAKE_CFLAGS_ISYSTEM        = -isystem
QMAKE_CFLAGS_YACC          += -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_HIDESYMS      += -fvisibility=hidden
QMAKE_CFLAGS_EXCEPTIONS_OFF += -fno-exceptions

QMAKE_CXXFLAGS            += $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_DEPS       += $$QMAKE_CFLAGS_DEPS
QMAKE_CXXFLAGS_WARN_ON    += $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF   += $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE    += $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG      += $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB      += $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_STATIC_LIB += $$QMAKE_CFLAGS_STATIC_LIB
QMAKE_CXXFLAGS_APP        += $$QMAKE_CFLAGS_APP
QMAKE_CXXFLAGS_YACC       += $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_HIDESYMS   += $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden
QMAKE_CXXFLAGS_EXCEPTIONS_OFF += $$QMAKE_CFLAGS_EXCEPTIONS_OFF

QMAKE_LFLAGS           +=
QMAKE_LFLAGS_DEBUG     +=
QMAKE_LFLAGS_APP       +=
QMAKE_LFLAGS_RELEASE   +=
QMAKE_LFLAGS_EXCEPTIONS_OFF +=

QMAKE_CFLAGS_SSE2      += -msse2
QMAKE_CFLAGS_SSE3      += -msse3
QMAKE_CFLAGS_SSSE3     += -mssse3
QMAKE_CFLAGS_SSE4_1    += -msse4.1
QMAKE_CFLAGS_SSE4_2    += -msse4.2
QMAKE_CFLAGS_AVX       += -mavx
QMAKE_CFLAGS_AVX2      += -mavx2
QMAKE_CFLAGS_IWMMXT    += -mcpu=iwmmxt
QMAKE_CFLAGS_NEON      += -mfpu=neon
#End of file /qtbase/mkspecs/common/gcc-base.conf

QMAKE_LFLAGS_SHLIB     += -shared
QMAKE_LFLAGS_PLUGIN    += $$QMAKE_LFLAGS_SHLIB
QMAKE_LFLAGS_SONAME    += -Wl,-soname,
QMAKE_LFLAGS_THREAD    +=
QMAKE_LFLAGS_RPATH      = -Wl,-rpath,
QMAKE_LFLAGS_RPATHLINK  = -Wl,-rpath-link,

# -Bsymbolic-functions (ld) support
QMAKE_LFLAGS_BSYMBOLIC_FUNC = -Wl,-Bsymbolic-functions
QMAKE_LFLAGS_DYNAMIC_LIST   = -Wl,--dynamic-list,
#End of file /qtbase/mkspecs/common/gcc-base-unix.conf
#From file /qtbase/mkspecs/common/g++-unix.conf
#
# Qmake configuration for the GNU C++ compiler on *nix-systems
#
# Before making changes to this file, please read the comment in
# gcc-base.conf, to make sure the change goes in the right place.
#
# To verify that your change has the desired effect on the final configuration
# you can use the manual test in tests/manual/mkspecs.
#

#From file /qtbase/mkspecs/common/g++-base.conf
#
# Qmake configuration for the GNU C++ compiler
#
# Before making changes to this file, please read the comment in
# gcc-base.conf, to make sure the change goes in the right place.
#
# To verify that your change has the desired effect on the final configuration
# you can use the manual test in tests/manual/mkspecs.
#

QMAKE_COMPILER          = gcc

QMAKE_CC                = gcc

QMAKE_LINK_C            = $$QMAKE_CC
QMAKE_LINK_C_SHLIB      = $$QMAKE_CC

QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_OPTIMIZE -g

QMAKE_CXX               = g++

QMAKE_LINK              = $$QMAKE_CXX
QMAKE_LINK_SHLIB        = $$QMAKE_CXX

QMAKE_CXXFLAGS_RELEASE_WITH_DEBUGINFO += $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO

QMAKE_PCH_OUTPUT_EXT    = .gch

QMAKE_CFLAGS_PRECOMPILE       = -x c-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
QMAKE_CFLAGS_USE_PRECOMPILE   = -include ${QMAKE_PCH_OUTPUT_BASE}
QMAKE_CXXFLAGS_PRECOMPILE     = -x c++-header -c ${QMAKE_PCH_INPUT} -o ${QMAKE_PCH_OUTPUT}
QMAKE_CXXFLAGS_USE_PRECOMPILE = $$QMAKE_CFLAGS_USE_PRECOMPILE

QMAKE_CXXFLAGS_CXX11    = -std=c++0x
QMAKE_LFLAGS_CXX11      =
#End of file /qtbase/mkspecs/common/g++-base.conf

QMAKE_LFLAGS_RELEASE   += -Wl,-O1
QMAKE_LFLAGS_NOUNDEF   += -Wl,--no-undefined
#End of file /qtbase/mkspecs/common/g++-unix.conf

!load(device_config) {
    error(Could not successfully load device configuration)
}

# TODO: fix paths
# modifications to g++-unix.conf
QMAKE_CC                = $${TIZEN_SDK_PATH}/tools/llvm-3.1/bin/clang
QMAKE_CXX               = $${TIZEN_SDK_PATH}/tools/llvm-3.1/bin/clang++
QMAKE_LINK              = $${QMAKE_CXX}
QMAKE_LINK_SHLIB        = $${QMAKE_CXX}

# TODO: fix paths
QMAKE_CFLAGS		+= -g -Wall -c --sysroot="$${TIZEN_SDK_PATH}/platforms/tizen2.2/rootstraps/tizen-device-2.2.native"
QMAKE_CFLAGS		+= -I"$${TIZEN_PLATFORM_PATH}/usr/include"
QMAKE_CFLAGS		+= -I"$${TIZEN_PLATFORM_PATH}/usr/include/osp"
QMAKE_CFLAGS		+= -I"$${TIZEN_PLATFORM_PATH}/usr/include/libxml2"

# TODO: fix paths
QMAKE_CFLAGS_RELEASE	+= -O1
QMAKE_CFLAGS_DEBUG	+= -O0
QMAKE_CFLAGS 		+= $${TIZEN_QMAKE_CFLAGS}

QMAKE_CXXFLAGS		+= $${QMAKE_CFLAGS}

# modifications to linux.conf
# TODO: fix paths
QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
QMAKE_NM                = $${CROSS_COMPILE}nm -P
QMAKE_STRIP             = $${CROSS_COMPILE}strip
#End of file /qtbase/mkspecs/devices/common/linux_device_pre.conf

!isEmpty(CROSS_COMPILE) {
  QMAKE_INCDIR = $$[QT_SYSROOT]/usr/include
  QMAKE_LIBDIR = $$[QT_SYSROOT]/lib
  QMAKE_LIBDIR += $$[QT_SYSROOT]/usr/lib
}


QMAKE_PLATFORM = tizen $$QMAKE_PLATFORM
DEFINES += Q_OS_LINUX_TIZEN
#End of file /qtbase/mkspecs/devices/common/linux_tizen_device_pre.conf

contains(TIZEN_PROFILE, mobile) {
    DEFINES += Q_OS_LINUX_TIZEN_MOBILE
} else:contains(TIZEN_PROFILE, ivi) {
    DEFINES += Q_OS_LINUX_TIZEN_IVI
} else:contains(TIZEN_PROFILE, generic) {
    DEFINES += Q_OS_LINUX_TIZEN_GENERIC
}

load(qt_config)
#End of file /qtbase/mkspecs/devices/linux-g++-tizen/qmake.conf
